# Koding Contoh MK Desain dan Analisis Algoritma (DAA) Semester Ganjil 2022/2023 Filkom UB
# Rencana Pembelajaran MK DAA Semester Ganjil 2022/2023 Kelas H
# Fakultas Ilmu Komputer (Filkom), Universitas Brawijaya (UB) 2022.

# Dosen Pengampu:
# 1. Imam Cholissodin, S.Si., M.Kom. | email: imamcs@ub.ac.id | Filkom UB

from flask import Flask, render_template_string

app = Flask(__name__)

from re import M

def listToString(a):
  string1 = " "
  return (string1.join(a))

import random
import numpy as np

MIN_MERGE = 32

def calcMinRun(n):
    r = 0
    while n >= MIN_MERGE:
        r |= n & 1
        n >>= 1
    return n + r

def insertionSort(arr, left, right):
    for i in range(left + 1, right + 1):
        j = i
        while j > left and arr[j] < arr[j - 1]:
            arr[j], arr[j - 1] = arr[j - 1], arr[j]
            j -= 1


def merge(arr, l, m, r):

    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])

    i, j, k = 0, 0, l

    while i < len1 and j < len2:
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1

        else:
            arr[k] = right[j]
            j += 1

        k += 1

    while i < len1:
        arr[k] = left[i]
        k += 1
        i += 1

    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1

def timSort(arr):
    n = len(arr)
    minRun = calcMinRun(n)


    for start in range(0, n, minRun):
        end = min(start + minRun - 1, n - 1)
        insertionSort(arr, start, end)

    size = minRun
    while size < n:

        for left in range(0, n, 2 * size):

            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))


            if mid < right:
                merge(arr, left, mid, right)

        size = 2 * size

    return arr

@app.route('/')
def hello_world():
    return 'Hello DAA from Flask!'

@app.route('/timer')
def timer():
    # a = 12
    # b = 7
    # return str(a+b)

    import time


    input_size = 10
    array_waktu_dalam_detik = np.zeros([input_size,2])
    for i in range(input_size):
      stringToFloat = random.sample(range(0, 1000), (i+1))
      start_time = time.time()
      listSuhu = stringToFloat
      # print(f'Data sebelum sorted : {stringToFloat}')
      timSort(listSuhu) # bisa diganti dengan fibo/ unique element

      # print(f'Data setelah sorted : {listSuhu}')
      y = (len(listSuhu)) - 1

      end_time = time.time()
      elapsed_time = end_time - start_time
      # print('Waktu dengan Timer (detik): ', elapsed_time, ' vs Waktu dengan T(n) = ',(i+1), 'Log (',(i+1),'): ', (i+1)*np.log2(i+1))
      np.set_printoptions(suppress=True)
      array_waktu_dalam_detik[i][0] = round((i+1),0)
      array_waktu_dalam_detik[i][1] = round(elapsed_time,6)
      #print()

      hasil = ''
      for time in list(array_waktu_dalam_detik[:,1]):
          hasil += str(time) + '<br>'


      return hasil




